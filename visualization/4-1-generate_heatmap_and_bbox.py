import numpy as np
import skimage.io as imgio
import skimage.color as imgco
import skimage.transform as imgtf
from skimage.measure import regionprops,label
from scipy.io import loadmat,savemat

heatmap_colors = np.array([(0.0, 0.0, 1.0), (0.0, 0.00390625, 1.0), (0.0, 0.0078125, 1.0), (0.0, 0.01171875, 1.0), (0.0, 0.015625, 1.0), (0.0, 0.01953125, 1.0), (0.0, 0.0234375, 1.0), (0.0, 0.02734375, 1.0), (0.0, 0.03125, 1.0), (0.0, 0.03515625, 1.0), 
            (0.0, 0.0390625, 1.0), (0.0, 0.04296875, 1.0), (0.0, 0.046875, 1.0), (0.0, 0.05078125, 1.0), (0.0, 0.0546875, 1.0), (0.0, 0.05859375, 1.0), (0.0, 0.0625, 1.0), (0.0, 0.06640625, 1.0), (0.0, 0.0703125, 1.0), (0.0, 0.07421875, 1.0), 
            (0.0, 0.078125, 1.0), (0.0, 0.08203125, 1.0), (0.0, 0.0859375, 1.0), (0.0, 0.08984375, 1.0), (0.0, 0.09375, 1.0), (0.0, 0.09765625, 1.0), (0.0, 0.1015625, 1.0), (0.0, 0.10546875, 1.0), (0.0, 0.109375, 1.0), (0.0, 0.11328125, 1.0), 
            (0.0, 0.1171875, 1.0), (0.0, 0.12109375, 1.0), (0.0, 0.125, 1.0), (0.0, 0.12890625, 1.0), (0.0, 0.1328125, 1.0), (0.0, 0.13671875, 1.0), (0.0, 0.140625, 1.0), (0.0, 0.14453125, 1.0), (0.0, 0.1484375, 1.0), (0.0, 0.15234375, 1.0),  
            (0.0, 0.15625, 1.0), (0.0, 0.16015625, 1.0), (0.0, 0.1640625, 1.0), (0.0, 0.16796875, 1.0), (0.0, 0.171875, 1.0), (0.0, 0.17578125, 1.0), (0.0, 0.1796875, 1.0), (0.0, 0.18359375, 1.0), (0.0, 0.1875, 1.0), (0.0, 0.19140625, 1.0), 
            (0.0, 0.1953125, 1.0), (0.0, 0.19921875, 1.0), (0.0, 0.203125, 1.0), (0.0, 0.20703125, 1.0), (0.0, 0.2109375, 1.0), (0.0, 0.21484375, 1.0), (0.0, 0.21875, 1.0), (0.0, 0.22265625, 1.0), (0.0, 0.2265625, 1.0), (0.0, 0.23046875, 1.0), 
            (0.0, 0.234375, 1.0), (0.0, 0.23828125, 1.0), (0.0, 0.2421875, 1.0), (0.0, 0.24609375, 1.0), (0.0, 0.25, 1.0), (0.0, 0.25390625, 1.0), (0.0, 0.2578125, 1.0), (0.0, 0.26171875, 1.0), (0.0, 0.265625, 1.0), (0.0, 0.26953125, 1.0), 
            (0.0, 0.2734375, 1.0), (0.0, 0.27734375, 1.0), (0.0, 0.28125, 1.0), (0.0, 0.28515625, 1.0), (0.0, 0.2890625, 1.0), (0.0, 0.29296875, 1.0), (0.0, 0.296875, 1.0), (0.0, 0.30078125, 1.0), (0.0, 0.3046875, 1.0), (0.0, 0.30859375, 1.0), 
            (0.0, 0.3125, 1.0), (0.0, 0.31640625, 1.0), (0.0, 0.3203125, 1.0), (0.0, 0.32421875, 1.0), (0.0, 0.328125, 1.0), (0.0, 0.33203125, 1.0), (0.0, 0.3359375, 1.0), (0.0, 0.33984375, 1.0), (0.0, 0.34375, 1.0), (0.0, 0.34765625, 1.0), 
            (0.0, 0.3515625, 1.0), (0.0, 0.35546875, 1.0), (0.0, 0.359375, 1.0), (0.0, 0.36328125, 1.0), (0.0, 0.3671875, 1.0), (0.0, 0.37109375, 1.0), (0.0, 0.375, 1.0),(0.0, 0.37890625, 1.0), (0.0, 0.3828125, 1.0), (0.0, 0.38671875, 1.0), 
            (0.0, 0.390625, 1.0), (0.0, 0.40625, 1.0), (0.0, 0.421875, 1.0), (0.0, 0.4375, 1.0), (0.0, 0.453125, 1.0), (0.0, 0.46875, 1.0), (0.0, 0.484375, 1.0), (0.0, 0.5, 1.0), (0.0, 0.515625, 1.0), (0.0, 0.53125, 1.0), 
            (0.0, 0.5625, 1.0), (0.0, 0.59375, 1.0), (0.0, 0.625, 1.0), (0.0, 0.65625, 1.0), (0.0, 0.6875, 1.0), (0.0, 0.71875, 1.0), (0.0, 0.75, 1.0), (0.0, 0.78125, 1.0), (0.0, 0.8125, 1.0), (0.0, 0.84375, 1.0), 
            (0.0, 0.890625, 1.0), (0.0, 0.9375, 1.0), (0.0, 0.984375, 1.0), (0.0, 1.0, 0.96875), (0.0, 1.0, 0.921875),(0.0, 1.0, 0.875), (0.0, 1.0, 0.828125), (0.0, 1.0, 0.78125), (0.0, 1.0, 0.734375), (0.0, 1.0, 0.6875), 
            (0.0, 1.0, 0.625), (0.0, 1.0, 0.5625), (0.0, 1.0, 0.5), (0.0, 1.0, 0.4375), (0.0, 1.0, 0.375), (0.0, 1.0, 0.3125), (0.0, 1.0, 0.25), (0.0, 1.0, 0.1875), (0.0, 1.0, 0.125), (0.0, 1.0, 0.0625), 
            (0.0, 1.0, 0.0), (0.0625, 1.0, 0.0), (0.125, 1.0, 0.0), (0.234375, 1.0, 0.0), (0.25, 1.0, 0.0), (0.265625, 1.0, 0.0), (0.28125, 1.0, 0.0), (0.296875, 1.0, 0.0), (0.3125, 1.0, 0.0), (0.328125, 1.0, 0.0),
            (0.34375, 1.0, 0.0), (0.359375, 1.0, 0.0), (0.375, 1.0, 0.0), (0.390625, 1.0, 0.0), (0.40625, 1.0, 0.0), (0.421875, 1.0, 0.0), (0.4375, 1.0, 0.0), (0.453125, 1.0, 0.0), (0.46875, 1.0, 0.0), (0.484375, 1.0, 0.0),
            (0.5, 1.0, 0.0), (0.515625, 1.0, 0.0), (0.53125, 1.0, 0.0), (0.546875, 1.0, 0.0), (0.5625, 1.0, 0.0), (0.578125, 1.0, 0.0), (0.59375, 1.0, 0.0), (0.609375, 1.0, 0.0), (0.625, 1.0, 0.0), (0.640625, 1.0, 0.0),
            (0.65625, 1.0, 0.0), (0.671875, 1.0, 0.0), (0.6875, 1.0, 0.0), (0.703125, 1.0, 0.0), (0.71875, 1.0, 0.0), (0.734375, 1.0, 0.0), (0.75, 1.0, 0.0), (0.765625, 1.0, 0.0), (0.78125, 1.0, 0.0), (0.796875, 1.0, 0.0),
            (0.8125, 1.0, 0.0), (0.828125, 1.0, 0.0), (0.84375, 1.0, 0.0), (0.859375, 1.0, 0.0), (0.875, 1.0, 0.0), (0.890625, 1.0, 0.0), (0.90625, 1.0, 0.0), (0.921875, 1.0, 0.0), (0.9375, 1.0, 0.0), (0.953125, 1.0, 0.0),
            (0.96875, 1.0, 0.0), (0.984375, 1.0, 0.0), (1.0, 1.0, 0.0), (1.0, 0.984375, 0.0), (1.0, 0.96875, 0.0), (1.0, 0.953125, 0.0), (1.0, 0.9375, 0.0), (1.0, 0.921875, 0.0), (1.0, 0.90625, 0.0), (1.0, 0.890625, 0.0),
            (1.0, 0.875, 0.0), (1.0, 0.859375, 0.0), (1.0, 0.84375, 0.0), (1.0, 0.828125, 0.0), (1.0, 0.8125, 0.0), (1.0, 0.796875, 0.0), (1.0, 0.78125, 0.0), (1.0, 0.765625, 0.0), (1.0, 0.75, 0.0), (1.0, 0.734375, 0.0),
            (1.0, 0.71875, 0.0), (1.0, 0.703125, 0.0), (1.0, 0.6875, 0.0), (1.0, 0.671875, 0.0), (1.0, 0.65625, 0.0), (1.0, 0.640625, 0.0), (1.0, 0.625, 0.0), (1.0, 0.609375, 0.0), (1.0, 0.59375, 0.0), (1.0, 0.578125, 0.0),
            (1.0, 0.5625, 0.0), (1.0, 0.546875, 0.0), (1.0, 0.53125, 0.0), (1.0, 0.515625, 0.0), (1.0, 0.5, 0.0), (1.0, 0.484375, 0.0), (1.0, 0.46875, 0.0), (1.0, 0.453125, 0.0), (1.0, 0.4375, 0.0), (1.0, 0.421875, 0.0),
            (1.0, 0.40625, 0.0), (1.0, 0.390625, 0.0), (1.0, 0.375, 0.0), (1.0, 0.359375, 0.0), (1.0, 0.34375, 0.0), (1.0, 0.328125, 0.0), (1.0, 0.3125, 0.0), (1.0, 0.296875, 0.0), (1.0, 0.28125, 0.0), (1.0, 0.265625, 0.0),
            (1.0, 0.25, 0.0), (1.0, 0.234375, 0.0), (1.0, 0.21875, 0.0), (1.0, 0.203125, 0.0), (1.0, 0.1875, 0.0), (1.0, 0.171875, 0.0), (1.0, 0.15625, 0.0), (1.0, 0.140625, 0.0), (1.0, 0.125, 0.0), (1.0, 0.109375, 0.0),
            (1.0, 0.09375, 0.0), (1.0, 0.078125, 0.0), (1.0, 0.0625, 0.0), (1.0, 0.046875, 0.0), (1.0, 0.03125, 0.0), (1.0, 0.015625, 0.0)])
def heatmap_with_color(heatmap):
    if np.max(heatmap) <= 1.0:
        heatmap = (255*heatmap).astype(np.uint8)
    colors = heatmap_colors[np.unique(heatmap),:]
    heatmap = imgco.label2rgb(heatmap,colors=colors)
    return 255*heatmap

def heatmap_with_img(img,heatmap):
    heatmap[heatmap<=0] = 0.0
    heatmap_max = np.max(heatmap)
    heatmap_min = np.min(heatmap)
    heatmap = (heatmap-heatmap_min)/(heatmap_max-heatmap_min)
    heatmap_rgb = heatmap_with_color((255*heatmap).astype(np.uint8))
    if len(img.shape) >= 3:
        mixed = 0.6*img+0.4*heatmap_rgb
    else:
        mixed = 0.6*np.expand_dims(img,axis=2)+0.4*heatmap_rgb
    return mixed.astype(np.uint8)

def main():
    attention_map_global = loadmat("output/cub_activation_map.mat")["x"]
    attention_map_local = loadmat("output/cub_contribution_map.mat")["x"]
    results_object = {"object":np.zeros([5794,4],np.int32)}
    results_local = {}
    for index in range(1,5795): results_local[str(index)] = None

    for single_id in range(1,5795):
        if single_id%500 == 0: print(f"total:5794, now:{single_id}")
        img = imgio.imread(f"output/cub_input_image/{single_id}.jpg")

        single_attention_map_global = imgtf.resize(attention_map_global[single_id-1],[448,448])
        single_attention_map_local = imgtf.resize(attention_map_local[single_id-1],[448,448])

        heatmap = heatmap_with_img(img,single_attention_map_global)
        imgio.imsave(f"output/cub_attention_image/{single_id}_heatmap_global.jpg",heatmap)
        heatmap = heatmap_with_img(img,single_attention_map_local)
        imgio.imsave(f"output/cub_attention_image/{single_id}_heatmap_local.jpg",heatmap)

        # global bbox
        regions = regionprops(label((single_attention_map_global>0.43*np.max(single_attention_map_global)).astype(np.int32)))
        max_number = 0
        bbox = [0,0,0,0]
        for single_region in regions:
            if single_region.area > max_number:
                max_number = single_region.area
                bbox = single_region.bbox
        results_object["object"][single_id-1] = bbox

        # local bbox
        regions = regionprops(label((single_attention_map_local>0.43*np.max(single_attention_map_local)).astype(np.int32)))
        sum_value = np.sum(single_attention_map_local)
        for single_region in regions:
            bbox = single_region.bbox
            bbox_value = np.sum(single_attention_map_local[bbox[0]:bbox[2],bbox[1]:bbox[3]])
            bbox_rate = int((bbox_value/sum_value)*100)
            if results_local[str(single_id)] is None:
                results_local[str(single_id)] = np.array([[bbox_rate,single_region.area,bbox[0],bbox[1],bbox[2],bbox[3]]],np.int32)
            else:
                results_local[str(single_id)] = np.concatenate([results_local[str(single_id)],np.array([[bbox_rate,single_region.area,bbox[0],bbox[1],bbox[2],bbox[3]]],np.int32)],axis=0)

    savemat("output/draw_bbox_results_object.mat",results_object)
    savemat("output/draw_bbox_results_local.mat",results_local)

if __name__ == "__main__":
    main()
